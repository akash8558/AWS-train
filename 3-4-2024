1.For infinite loop
class Loop
{
  public static void main(String args[]){
      int j=11;
    for(;j>10;j++)
     {
       System.out.println("infinite"+j);
     }
}
}
output:
infinite11
infinite12
infinite13
infinite14
infinite15
infinite16
infinite17
infinite18
infinite19
infinite20
infinite21
infinite22
infinite23
....
....
...
2.upto n prime numbers
    class PrimeNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a positive integer (n): ");
        int n = scanner.nextInt();
        scanner.close();

       System.out.println("Prime numbers up to " + n + ":");
        for (int i = 2; i <= n; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
    }

    // Function to check if a number is prime
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}
output:
Enter a positive integer (n): 41
Prime numbers up to 41:
2 3 5 7 11 13 17 19 23 29 31 37 41 
3.Nested if

class NestedIf{
        public static void main(String args[]){
            int a = 10 , b = 20 ;
            if( a == 10){
                if(b == 30){
                    System.out.println("a = " + a);
                    System.out.println("a = " + a);   
                }
            }
        }
    }
Unique String
import java.util.HashSet;
import java.util.Set;

public class SubstringsCounter {
    public static void main(String[] args) {
        String input = "aaaa"; // Example input string

        int count = countDistinctSubstrings(input);
        System.out.println("Distinct Substrings: " + count);
    }

    private static int countDistinctSubstrings(String str) {
        Set<String> uniqueSubstrings = new HashSet<>();
        for (int i = 0; i < str.length(); i++) {
            for (int j = i + 1; j <= str.length(); j++) {
                uniqueSubstrings.add(str.substring(i, j));
            }
        }
        return uniqueSubstrings.size();
    }
}


OUTPUT:
Distinct Substrings: 4
